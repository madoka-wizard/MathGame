{
  "code": "short_multiplication__vasily_game",
  "namespaceCode": "vasily_game",
  "nameEn": "Short multiplication",
  "nameRu": "",
  "descriptionShortEn": "",
  "descriptionShortRu": "",
  "descriptionEn": "",
  "descriptionRu": "",
  "rulePacks": [
    {
      "namespaceCode": "vasily_game",
      "rulePackCode": "arithmetic_pow__vasily_game"
    }
  ],
  "rules": [
    {
      "left": "(+(^(a;2);-(^(b;2))))",
      "right": "(*(+(a;-(b));+(a;b)))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(*(+(a;-(b));+(a;b)))",
      "right": "(+(^(a;2);-(^(b;2))))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(^(+(a;b);2))",
      "right": "(+(^(a;2);*(2;a;b);^(b;2)))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;2);*(2;a;b);^(b;2)))",
      "right": "(^(+(a;b);2))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;2);*(2;a);1))",
      "right": "(^(+(a;1);2))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(^(+(a;-(b));2))",
      "right": "(+(^(a;2);-(*(2;a;b));^(b;2)))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;2);-(*(2;a;b));^(b;2)))",
      "right": "(^(+(a;-(b));2))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;2);-(*(2;a));1))",
      "right": "(^(+(a;-(1));2))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(^(+(a;b);3))",
      "right": "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))",
      "right": "(^(+(a;b);3))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;3);*(3;^(a;2));*(3;a);1))",
      "right": "(^(+(a;1);3))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(^(+(a;-(b));3))",
      "right": "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))",
      "right": "(^(+(a;-(b));3))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))",
      "right": "(^(+(a;-(1));3))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;3);-(^(b;3))))",
      "right": "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))",
      "right": "(+(^(a;3);-(^(b;3))))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(*(+(a;-(1));+(^(a;2);a;1)))",
      "right": "(+(^(a;3);-(^(1;3))))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(+(^(a;3);^(b;3)))",
      "right": "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))",
      "right": "(+(^(a;3);^(b;3)))",
      "matchJumbledAndNested": true
    },
    {
      "left": "(*(+(a;1);+(^(a;2);-(a);1)))",
      "right": "(+(^(a;3);^(1;3)))",
      "matchJumbledAndNested": true
    }
  ]
}
